#!/usr/bin/bash
# Author: Kristopher Ali - February 11, 2016
# This program is a basic text-based rpg.

declare -A map
declare -A mapData
menuMsg="WASD to MOVE | Q to quit to menu (no menu atm)"

function draw {
	for y in `seq 1 $mapHeight`;
	do
		for x in `seq 1 $mapWidth`;
		do
			local mapValue=${map[$x,$y]}

			if [ -n "$mapValue" ]; then
				output="$output$mapValue "
			else
				output="$output$defaultTile "
			fi
		done
		output="$output\n"
	done

	clear
}

function move {
	draw
	output="$output$menuMsg\n"

	while true; do
		printf "$output";
		output=""

		read -rsn1 step
		case $step in
			[wW]* )
				step "north";
				draw;;

			[sS]* )
				step "south";
				draw;;

			[dD]* )
				step "east";
				draw;;

			[aA]* )
				step "west";
				draw;;

			[qQ]* )
				exit;;

			* )
				draw;
				output="${output}Invalid entry.\n";;
		esac

		output="$output$menuMsg\n";
	done
}

function buffput {
	output="$output$1"
	# should add param to output and have an option to print it
	# immediate after or other things 
}

function step {
	draw
	local nextPos=0
	if [ $1 ]; then
		case $1 in
			north)
				nextPos=$((playerY-1));

				if [[ $nextPos < $minYBorder ]]; then
					output="${output}You are at the edge of the map!\n";
					continue;
				fi

				case ${map[$playerX,$nextPos]} in
					${mapData["dense"]})
						output="${output}There is something in the way!\n"
						continue;
				esac

				map[$playerX,$playerY]=" ";
				((playerY--));
				map[$playerX,$playerY]=${mapData["player"]};;

			south)
				nextPos=$((playerY+1));

				if [[ $nextPos < $maxYBorder ]]; then
					output="${output}You are at the edge of the map!\n";
					continue;
				fi

				case ${map[$playerX,$nextPos]} in
					${mapData["dense"]})
						output="${output}There is something in the way!\n"
						continue;
				esac

				map[$playerX,$playerY]=" ";
				((playerY++));
				map[$playerX,$playerY]=${mapData["player"]};;

			east)
				nextPos=$((playerX+1));

				if [[ $nextPos < $maxXBorder ]]; then
					output="${output}You are at the edge of the map!\n";
					continue;
				fi

				case ${map[$nextPos,$playerY]} in
					${mapData["dense"]})
						output="${output}There is something in the way!\n"
						continue;
				esac

				map[$playerX,$playerY]=" ";
				((playerX++));
				map[$playerX,$playerY]=${mapData["player"]};;


			west)
				nextPos=$((playerX-1));

				if [[ $nextPos < $minXBorder ]]; then
					output="${output}You are at the edge of the map!\n";
					continue;
				fi

				case ${map[$nextPos,$playerY]} in
					${mapData["dense"]})
						output="${output}There is something in the way!\n";
						continue;
				esac

				map[$playerX,$playerY]=" ";
				((playerX--));
				map[$playerX,$playerY]=${mapData["player"]};;

			*)
				output="${output}Invalid movement presented.\n";
		esac
	fi
}

function loadMap {
	if [ -n "$1" ]; then
		local counter=0
		while read line; do
			local regex="(\s*[^.!?=\\\n]*[\w]*)=(\s*[^.!?=\\\n]*[\w]*)"
			
			if [[ $line =~ $regex ]]; then
				local param=${BASH_REMATCH[1]}
				local value=${BASH_REMATCH[2]}

				case ${param,,} in
					mapwidth)
						mapWidth=$value;;

					mapheight)
						mapHeight=$value;;

					defaulttile)
						defaultTile=$value;;

					*)
						echo "$line is an unhandled parameter."
				esac
			fi
		done < maps/$1/$1.config

		minYBorder=1
		maxYBorder=$mapHeight
		minXBorder=1
		maxXBorder=$mapWidth

		while read line; do
			local regex="([^=]+)=(.*)"

			if [[ $line =~ $regex ]]; then
				local param=${BASH_REMATCH[2]}
				local value=${BASH_REMATCH[1]}

				echo "TT $param TT"

				case ${param,,} in
					player)
						mapData["player"]=$value;;
					
					enemy)
						mapData["enemy"]=$value;;
					
					dense)
						mapData["dense"]=$value;;

					star)
						mapData["star"]=$value;;

					*)
						echo "$line is an unknown map data entry.";;
				esac

			else
				echo $line
			fi	
		done < maps/$1/$1.data

		echo ${mapData["player"]}

		local y=1
		local x2=0

		while read line; do
			x2=0
			for x in `seq 1 $mapWidth`;
			do
				map[$x,$y]=${line:$((x-1+x2)):1}

				if [[ "${map[$x,$y]}" == "${mapData["player"]}" ]]; then
					playerX=$x
					playerY=$y
					echo "Player data set! | ${map[$x,$y]} equals ${mapData["player"]}"
				fi

				((x2++))
			done
			((y++))

			if [ $y -gt $mapHeight ]; then
				break
			fi
		done < maps/$1/$1.map
	fi


}

loadMap "dungeon1"
move
